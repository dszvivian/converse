// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Create User model
model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  name      String
  posts     Posts[]
  profilePicture Bytes?
  dob       DateTime? @db.Date
  gender    String? @db.VarChar(1)
  bio       String?
  branchName String?
  uploads   Uploads[]
  chat      Chat[]
}


// Create Posts model with thread relation
model Posts {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  thread    Thread   @relation(fields: [threadId], references: [id])
  threadId  Int
  attachments Uploads[]
}

// Create Thread model with posts relation
model Thread {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Posts[]
}

// Create calendar model
model Calendar {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  eventName String
  description String
}

// Create model uploads for storing files
model Uploads {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  file      Bytes
  fileName  String
  fileType  String?
  posts     Posts   @relation(fields: [postId], references: [id])
  postId    Int
}

// Create model for global chat
model Chat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
}

// Create  model for college communities
model Community {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  description String
  logo      Bytes?
  contact   String?
  website   String?
}
